/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as InfoRouteImport } from './routes/info'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'

const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const InfoRoute = InfoRouteImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/info': typeof InfoRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/profile': typeof ProfileRoute
  '/projects': typeof ProjectsRoute
  '/services': typeof ServicesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/info': typeof InfoRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/profile': typeof ProfileRoute
  '/projects': typeof ProjectsRoute
  '/services': typeof ServicesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/info': typeof InfoRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/profile': typeof ProfileRoute
  '/projects': typeof ProjectsRoute
  '/services': typeof ServicesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/info'
    | '/privacy-policy'
    | '/profile'
    | '/projects'
    | '/services'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/info'
    | '/privacy-policy'
    | '/profile'
    | '/projects'
    | '/services'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/info'
    | '/privacy-policy'
    | '/profile'
    | '/projects'
    | '/services'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  InfoRoute: typeof InfoRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  ProfileRoute: typeof ProfileRoute
  ProjectsRoute: typeof ProjectsRoute
  ServicesRoute: typeof ServicesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/info': {
      id: '/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  InfoRoute: InfoRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  ProfileRoute: ProfileRoute,
  ProjectsRoute: ProjectsRoute,
  ServicesRoute: ServicesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
